{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeAsStream = void 0;\n\nvar stream_1 = require(\"stream\");\n\nvar ObservableStoreStream = /*#__PURE__*/function (_stream_1$Duplex) {\n  _inherits(ObservableStoreStream, _stream_1$Duplex);\n\n  var _super = _createSuper(ObservableStoreStream);\n\n  function ObservableStoreStream(obsStore) {\n    var _this;\n\n    _classCallCheck(this, ObservableStoreStream);\n\n    _this = _super.call(this, {\n      // pass values, not serializations\n      objectMode: true\n    }); // dont buffer outgoing updates\n\n    _this.resume(); // save handler so we can unsubscribe later\n\n\n    _this.handler = function (state) {\n      return _this.push(state);\n    }; // subscribe to obsStore changes\n\n\n    _this.obsStore = obsStore;\n\n    _this.obsStore.subscribe(_this.handler);\n\n    return _this;\n  } // emit current state on new destination\n\n\n  _createClass(ObservableStoreStream, [{\n    key: \"pipe\",\n    value: function pipe(dest, options) {\n      var result = _get(_getPrototypeOf(ObservableStoreStream.prototype), \"pipe\", this).call(this, dest, options);\n\n      dest.write(this.obsStore.getState());\n      return result;\n    } // write from incoming stream to state\n\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      this.obsStore.putState(chunk);\n      callback();\n    } // noop - outgoing stream is asking us if we have data we arent giving it\n\n  }, {\n    key: \"_read\",\n    value: function _read(_size) {\n      return undefined;\n    } // unsubscribe from event emitter\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(err, callback) {\n      this.obsStore.unsubscribe(this.handler);\n\n      _get(_getPrototypeOf(ObservableStoreStream.prototype), \"_destroy\", this).call(this, err, callback);\n    }\n  }]);\n\n  return ObservableStoreStream;\n}(stream_1.Duplex);\n\nfunction storeAsStream(obsStore) {\n  return new ObservableStoreStream(obsStore);\n}\n\nexports.storeAsStream = storeAsStream;","map":{"version":3,"sources":["../src/asStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;IAIM,qB;;;;;AAKJ,iCAAY,QAAZ,EAAwC;AAAA;;AAAA;;AACtC,8BAAM;AACJ;AACA,MAAA,UAAU,EAAE;AAFR,KAAN,EADsC,CAKtC;;AACA,UAAK,MAAL,GANsC,CAOtC;;;AACA,UAAK,OAAL,GAAe,UAAC,KAAD;AAAA,aAAc,MAAK,IAAL,CAAU,KAAV,CAAd;AAAA,KAAf,CARsC,CAStC;;;AACA,UAAK,QAAL,GAAgB,QAAhB;;AACA,UAAK,QAAL,CAAc,SAAd,CAAwB,MAAK,OAA7B;;AAXsC;AAYvC,G,CAED;;;;;WACA,cACE,IADF,EAEE,OAFF,EAE6B;AAE3B,UAAM,MAAM,mFAAc,IAAd,EAAoB,OAApB,CAAZ;;AACA,MAAA,IAAI,CAAC,KAAL,CAAW,KAAK,QAAL,CAAc,QAAd,EAAX;AACA,aAAO,MAAP;AACD,K,CAED;;;;WACA,gBACE,KADF,EAEE,SAFF,EAGE,QAHF,EAG0C;AAExC,WAAK,QAAL,CAAc,QAAd,CAAuB,KAAvB;AACA,MAAA,QAAQ;AACT,K,CAED;;;;WACA,eAAM,KAAN,EAAmB;AACjB,aAAO,SAAP;AACD,K,CAED;;;;WACA,kBAAS,GAAT,EAA4B,QAA5B,EAAmE;AACjE,WAAK,QAAL,CAAc,WAAd,CAA0B,KAAK,OAA/B;;AACA,0FAAe,GAAf,EAAoB,QAApB;AACD;;;;EAhDoC,QAAA,CAAA,M;;AAmDvC,SAAgB,aAAhB,CACE,QADF,EAC8B;AAE5B,SAAO,IAAI,qBAAJ,CAA0B,QAA1B,CAAP;AACD;;AAJD,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { Duplex as DuplexStream } from 'stream';\n\nimport { ObservableStore } from './ObservableStore';\n\nclass ObservableStoreStream<T> extends DuplexStream {\n  handler: (state: T) => void;\n\n  obsStore: ObservableStore<T>;\n\n  constructor(obsStore: ObservableStore<T>) {\n    super({\n      // pass values, not serializations\n      objectMode: true,\n    });\n    // dont buffer outgoing updates\n    this.resume();\n    // save handler so we can unsubscribe later\n    this.handler = (state: T) => this.push(state);\n    // subscribe to obsStore changes\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  }\n\n  // emit current state on new destination\n  pipe<U extends NodeJS.WritableStream>(\n    dest: U,\n    options?: { end?: boolean },\n  ): U {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState() as any);\n    return result;\n  }\n\n  // write from incoming stream to state\n  _write(\n    chunk: any,\n    _encoding: string,\n    callback: (error?: Error | null) => void,\n  ): void {\n    this.obsStore.putState(chunk);\n    callback();\n  }\n\n  // noop - outgoing stream is asking us if we have data we arent giving it\n  _read(_size: number): void {\n    return undefined;\n  }\n\n  // unsubscribe from event emitter\n  _destroy(err: Error | null, callback: (error: Error | null) => void): void {\n    this.obsStore.unsubscribe(this.handler);\n    super._destroy(err, callback);\n  }\n}\n\nexport function storeAsStream<T>(\n  obsStore: ObservableStore<T>,\n): ObservableStoreStream<T> {\n  return new ObservableStoreStream(obsStore);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}