{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableStore = void 0;\n\nvar safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nvar ObservableStore = /*#__PURE__*/function (_safe_event_emitter_) {\n  _inherits(ObservableStore, _safe_event_emitter_);\n\n  var _super = _createSuper(ObservableStore);\n\n  function ObservableStore(initState) {\n    var _this;\n\n    _classCallCheck(this, ObservableStore);\n\n    _this = _super.call(this);\n\n    if (initState) {\n      _this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      _this._state = {};\n    }\n\n    return _this;\n  } // wrapper around internal getState\n\n\n  _createClass(ObservableStore, [{\n    key: \"getState\",\n    value: function getState() {\n      return this._getState();\n    } // wrapper around internal putState\n\n  }, {\n    key: \"putState\",\n    value: function putState(newState) {\n      this._putState(newState);\n\n      this.emit('update', newState);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(partialState) {\n      // if non-null object, merge\n      if (partialState && typeof partialState === 'object') {\n        var state = this.getState();\n        this.putState(Object.assign(Object.assign({}, state), partialState)); // if not object, use new value\n      } else {\n        this.putState(partialState);\n      }\n    } // subscribe to changes\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(handler) {\n      this.on('update', handler);\n    } // unsubscribe to changes\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(handler) {\n      this.removeListener('update', handler);\n    } //\n    // private\n    //\n    // read from persistence\n\n  }, {\n    key: \"_getState\",\n    value: function _getState() {\n      return this._state;\n    } // write to persistence\n\n  }, {\n    key: \"_putState\",\n    value: function _putState(newState) {\n      this._state = newState;\n    }\n  }]);\n\n  return ObservableStore;\n}(safe_event_emitter_1.default);\n\nexports.ObservableStore = ObservableStore;","map":{"version":3,"sources":["../src/ObservableStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;IAEa,e;;;;;AAGX,2BAAY,SAAZ,EAAwB;AAAA;;AAAA;;AACtB;;AACA,QAAI,SAAJ,EAAe;AACb,YAAK,MAAL,GAAc,SAAd;AACD,KAFD,MAEO;AACL;AACA,YAAK,MAAL,GAAc,EAAd;AACD;;AAPqB;AAQvB,G,CAED;;;;;WACA,oBAAQ;AACN,aAAO,KAAK,SAAL,EAAP;AACD,K,CAED;;;;WACA,kBAAS,QAAT,EAAoB;AAClB,WAAK,SAAL,CAAe,QAAf;;AACA,WAAK,IAAL,CAAU,QAAV,EAAoB,QAApB;AACD;;;WAED,qBAAY,YAAZ,EAAoC;AAClC;AACA,UAAI,YAAY,IAAI,OAAO,YAAP,KAAwB,QAA5C,EAAsD;AACpD,YAAM,KAAK,GAAG,KAAK,QAAL,EAAd;AACA,aAAK,QAAL,CAAa,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,KAAN,CAAA,EAAgB,YAAhB,CAAb,EAFoD,CAGpD;AACD,OAJD,MAIO;AACL,aAAK,QAAL,CAAc,YAAd;AACD;AACF,K,CAED;;;;WACA,mBAAU,OAAV,EAAqC;AACnC,WAAK,EAAL,CAAQ,QAAR,EAAkB,OAAlB;AACD,K,CAED;;;;WACA,qBAAY,OAAZ,EAAuC;AACrC,WAAK,cAAL,CAAoB,QAApB,EAA8B,OAA9B;AACD,K,CAED;AACA;AACA;AAEA;;;;WACU,qBAAS;AACjB,aAAO,KAAK,MAAZ;AACD,K,CAED;;;;WACU,mBAAU,QAAV,EAAqB;AAC7B,WAAK,MAAL,GAAc,QAAd;AACD;;;;EAzDqC,oBAAA,CAAA,O;;AAAxC,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\n\nexport class ObservableStore<T> extends SafeEventEmitter {\n  private _state: T;\n\n  constructor(initState: T) {\n    super();\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {} as unknown as T;\n    }\n  }\n\n  // wrapper around internal getState\n  getState(): T {\n    return this._getState();\n  }\n\n  // wrapper around internal putState\n  putState(newState: T): void {\n    this._putState(newState);\n    this.emit('update', newState);\n  }\n\n  updateState(partialState: Partial<T>): void {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState({ ...state, ...partialState });\n      // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  }\n\n  // subscribe to changes\n  subscribe(handler: (state: T) => void): void {\n    this.on('update', handler);\n  }\n\n  // unsubscribe to changes\n  unsubscribe(handler: (state: T) => void): void {\n    this.removeListener('update', handler);\n  }\n\n  //\n  // private\n  //\n\n  // read from persistence\n  protected _getState(): T {\n    return this._state;\n  }\n\n  // write to persistence\n  protected _putState(newState: T): void {\n    this._state = newState;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}