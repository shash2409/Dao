{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n\nvar _get = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _assertThisInitialized = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _inherits = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\n\nvar buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\n\n\nfunction checkUint8Array(b) {\n  if (!(b instanceof Uint8Array)) {\n    throw new TypeError('b must be a Uint8Array');\n  }\n}\n\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\n\nfunction uint8ArrayToBuffer(b) {\n  checkUint8Array(b);\n  return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\n\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\n\nvar Layout = /*#__PURE__*/function () {\n  function Layout(span, property) {\n    _classCallCheck(this, Layout);\n\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n\n\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n\n\n  _createClass(Layout, [{\n    key: \"makeDestinationObject\",\n    value: function makeDestinationObject() {\n      return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n\n  }, {\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 > this.span) {\n        throw new RangeError('indeterminate span');\n      }\n\n      return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n\n  }, {\n    key: \"replicate\",\n    value: function replicate(property) {\n      var rv = Object.create(this.constructor.prototype);\n      Object.assign(rv, this);\n      rv.property = property;\n      return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      return undefined;\n    }\n  }]);\n\n  return Layout;\n}();\n\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\n\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n\n  return name;\n}\n\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n\n  layout.makeDestinationObject = function () {\n    return new Class();\n  };\n\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function value(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function value(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\n\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\n\nvar ExternalLayout = /*#__PURE__*/function (_Layout) {\n  _inherits(ExternalLayout, _Layout);\n\n  var _super = _createSuper(ExternalLayout);\n\n  function ExternalLayout() {\n    _classCallCheck(this, ExternalLayout);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExternalLayout, [{\n    key: \"isCount\",\n    value:\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    function isCount() {\n      throw new Error('ExternalLayout is abstract');\n    }\n  }]);\n\n  return ExternalLayout;\n}(Layout);\n\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\n\nvar GreedyCount = /*#__PURE__*/function (_ExternalLayout) {\n  _inherits(GreedyCount, _ExternalLayout);\n\n  var _super2 = _createSuper(GreedyCount);\n\n  function GreedyCount() {\n    var _this;\n\n    var elementSpan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var property = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, GreedyCount);\n\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n\n    _this = _super2.call(this, -1, property);\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n\n    _this.elementSpan = elementSpan;\n    return _this;\n  }\n  /** @override */\n\n\n  _createClass(GreedyCount, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return true;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var rem = b.length - offset;\n      return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return 0;\n    }\n  }]);\n\n  return GreedyCount;\n}(ExternalLayout);\n\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\n\nvar OffsetLayout = /*#__PURE__*/function (_ExternalLayout2) {\n  _inherits(OffsetLayout, _ExternalLayout2);\n\n  var _super3 = _createSuper(OffsetLayout);\n\n  function OffsetLayout(layout) {\n    var _this2;\n\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var property = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, OffsetLayout);\n\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    _this2 = _super3.call(this, layout.span, property || layout.property);\n    /** The subordinated layout. */\n\n    _this2.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Uint8Array\n     * being accessed.  */\n\n    _this2.offset = offset;\n    return _this2;\n  }\n  /** @override */\n\n\n  _createClass(OffsetLayout, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return this.layout instanceof UInt || this.layout instanceof UIntBE;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return this.layout.encode(src, b, offset + this.offset);\n    }\n  }]);\n\n  return OffsetLayout;\n}(ExternalLayout);\n\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UInt = /*#__PURE__*/function (_Layout2) {\n  _inherits(UInt, _Layout2);\n\n  var _super4 = _createSuper(UInt);\n\n  function UInt(span, property) {\n    var _this3;\n\n    _classCallCheck(this, UInt);\n\n    _this3 = _super4.call(this, span, property);\n\n    if (6 < _this3.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this3;\n  }\n  /** @override */\n\n\n  _createClass(UInt, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return UInt;\n}(Layout);\n\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UIntBE = /*#__PURE__*/function (_Layout3) {\n  _inherits(UIntBE, _Layout3);\n\n  var _super5 = _createSuper(UIntBE);\n\n  function UIntBE(span, property) {\n    var _this4;\n\n    _classCallCheck(this, UIntBE);\n\n    _this4 = _super5.call(this, span, property);\n\n    if (6 < _this4.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this4;\n  }\n  /** @override */\n\n\n  _createClass(UIntBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return UIntBE;\n}(Layout);\n\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Int = /*#__PURE__*/function (_Layout4) {\n  _inherits(Int, _Layout4);\n\n  var _super6 = _createSuper(Int);\n\n  function Int(span, property) {\n    var _this5;\n\n    _classCallCheck(this, Int);\n\n    _this5 = _super6.call(this, span, property);\n\n    if (6 < _this5.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this5;\n  }\n  /** @override */\n\n\n  _createClass(Int, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return Int;\n}(Layout);\n\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar IntBE = /*#__PURE__*/function (_Layout5) {\n  _inherits(IntBE, _Layout5);\n\n  var _super7 = _createSuper(IntBE);\n\n  function IntBE(span, property) {\n    var _this6;\n\n    _classCallCheck(this, IntBE);\n\n    _this6 = _super7.call(this, span, property);\n\n    if (6 < _this6.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this6;\n  }\n  /** @override */\n\n\n  _createClass(IntBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return IntBE;\n}(Layout);\n\nexports.IntBE = IntBE;\nvar V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\n\nfunction divmodInt64(src) {\n  var hi32 = Math.floor(src / V2E32);\n  var lo32 = src - hi32 * V2E32;\n  return {\n    hi32: hi32,\n    lo32: lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\n\n\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearUInt64 = /*#__PURE__*/function (_Layout6) {\n  _inherits(NearUInt64, _Layout6);\n\n  var _super8 = _createSuper(NearUInt64);\n\n  function NearUInt64(property) {\n    _classCallCheck(this, NearUInt64);\n\n    return _super8.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearUInt64, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var lo32 = buffer.readUInt32LE(offset);\n      var hi32 = buffer.readUInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeUInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearUInt64;\n}(Layout);\n\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearUInt64BE = /*#__PURE__*/function (_Layout7) {\n  _inherits(NearUInt64BE, _Layout7);\n\n  var _super9 = _createSuper(NearUInt64BE);\n\n  function NearUInt64BE(property) {\n    _classCallCheck(this, NearUInt64BE);\n\n    return _super9.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearUInt64BE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var hi32 = buffer.readUInt32BE(offset);\n      var lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearUInt64BE;\n}(Layout);\n\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearInt64 = /*#__PURE__*/function (_Layout8) {\n  _inherits(NearInt64, _Layout8);\n\n  var _super10 = _createSuper(NearInt64);\n\n  function NearInt64(property) {\n    _classCallCheck(this, NearInt64);\n\n    return _super10.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearInt64, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var lo32 = buffer.readUInt32LE(offset);\n      var hi32 = buffer.readInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearInt64;\n}(Layout);\n\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearInt64BE = /*#__PURE__*/function (_Layout9) {\n  _inherits(NearInt64BE, _Layout9);\n\n  var _super11 = _createSuper(NearInt64BE);\n\n  function NearInt64BE(property) {\n    _classCallCheck(this, NearInt64BE);\n\n    return _super11.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearInt64BE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var hi32 = buffer.readInt32BE(offset);\n      var lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearInt64BE;\n}(Layout);\n\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Float = /*#__PURE__*/function (_Layout10) {\n  _inherits(Float, _Layout10);\n\n  var _super12 = _createSuper(Float);\n\n  function Float(property) {\n    _classCallCheck(this, Float);\n\n    return _super12.call(this, 4, property);\n  }\n  /** @override */\n\n\n  _createClass(Float, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n      return 4;\n    }\n  }]);\n\n  return Float;\n}(Layout);\n\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar FloatBE = /*#__PURE__*/function (_Layout11) {\n  _inherits(FloatBE, _Layout11);\n\n  var _super13 = _createSuper(FloatBE);\n\n  function FloatBE(property) {\n    _classCallCheck(this, FloatBE);\n\n    return _super13.call(this, 4, property);\n  }\n  /** @override */\n\n\n  _createClass(FloatBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n      return 4;\n    }\n  }]);\n\n  return FloatBE;\n}(Layout);\n\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Double = /*#__PURE__*/function (_Layout12) {\n  _inherits(Double, _Layout12);\n\n  var _super14 = _createSuper(Double);\n\n  function Double(property) {\n    _classCallCheck(this, Double);\n\n    return _super14.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(Double, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n      return 8;\n    }\n  }]);\n\n  return Double;\n}(Layout);\n\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar DoubleBE = /*#__PURE__*/function (_Layout13) {\n  _inherits(DoubleBE, _Layout13);\n\n  var _super15 = _createSuper(DoubleBE);\n\n  function DoubleBE(property) {\n    _classCallCheck(this, DoubleBE);\n\n    return _super15.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(DoubleBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n      return 8;\n    }\n  }]);\n\n  return DoubleBE;\n}(Layout);\n\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Sequence = /*#__PURE__*/function (_Layout14) {\n  _inherits(Sequence, _Layout14);\n\n  var _super16 = _createSuper(Sequence);\n\n  function Sequence(elementLayout, count, property) {\n    var _this7;\n\n    _classCallCheck(this, Sequence);\n\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n\n    _this7 = _super16.call(this, span, property);\n    /** The layout for individual elements of the sequence. */\n\n    _this7.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n\n    _this7.count = count;\n    return _this7;\n  }\n  /** @override */\n\n\n  _createClass(Sequence, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      var span = 0;\n      var count = this.count;\n\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n\n      if (0 < this.elementLayout.span) {\n        span = count * this.elementLayout.span;\n      } else {\n        var idx = 0;\n\n        while (idx < count) {\n          span += this.elementLayout.getSpan(b, offset + span);\n          ++idx;\n        }\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var rv = [];\n      var i = 0;\n      var count = this.count;\n\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n\n      while (i < count) {\n        rv.push(this.elementLayout.decode(b, offset));\n        offset += this.elementLayout.getSpan(b, offset);\n        i += 1;\n      }\n\n      return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var elo = this.elementLayout;\n      var span = src.reduce(function (span, v) {\n        return span + elo.encode(v, b, offset + span);\n      }, 0);\n\n      if (this.count instanceof ExternalLayout) {\n        this.count.encode(src.length, b, offset);\n      }\n\n      return span;\n    }\n  }]);\n\n  return Sequence;\n}(Layout);\n\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\n\nvar Structure = /*#__PURE__*/function (_Layout15) {\n  _inherits(Structure, _Layout15);\n\n  var _super17 = _createSuper(Structure);\n\n  function Structure(fields, property, decodePrefixes) {\n    var _this8;\n\n    _classCallCheck(this, Structure);\n\n    if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {\n      return acc && v instanceof Layout;\n    }, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n\n\n    var _iterator = _createForOfIteratorHelper(fields),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fd = _step.value;\n\n        if (0 > fd.span && undefined === fd.property) {\n          throw new Error('fields cannot contain unnamed variable-length layout');\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var span = -1;\n\n    try {\n      span = fields.reduce(function (span, fd) {\n        return span + fd.getSpan();\n      }, 0);\n    } catch (e) {// ignore error\n    }\n\n    _this8 = _super17.call(this, span, property);\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n\n    _this8.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n\n    _this8.decodePrefixes = !!decodePrefixes;\n    return _this8;\n  }\n  /** @override */\n\n\n  _createClass(Structure, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      var span = 0;\n\n      try {\n        span = this.fields.reduce(function (span, fd) {\n          var fsp = fd.getSpan(b, offset);\n          offset += fsp;\n          return span + fsp;\n        }, 0);\n      } catch (e) {\n        throw new RangeError('indeterminate span');\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var dest = this.makeDestinationObject();\n\n      var _iterator2 = _createForOfIteratorHelper(this.fields),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fd = _step2.value;\n\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b, offset);\n          }\n\n          offset += fd.getSpan(b, offset);\n\n          if (this.decodePrefixes && b.length === offset) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var firstOffset = offset;\n      var lastOffset = 0;\n      var lastWrote = 0;\n\n      var _iterator3 = _createForOfIteratorHelper(this.fields),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var fd = _step3.value;\n          var span = fd.span;\n          lastWrote = 0 < span ? span : 0;\n\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n\n            if (undefined !== fv) {\n              lastWrote = fd.encode(fv, b, offset);\n\n              if (0 > span) {\n                /* Read the as-encoded span, which is not necessarily the\n                 * same as what we wrote. */\n                span = fd.getSpan(b, offset);\n              }\n            }\n          }\n\n          lastOffset = offset;\n          offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return lastOffset + lastWrote - firstOffset;\n    }\n    /** @override */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      var dest = this.makeDestinationObject();\n\n      var _iterator4 = _createForOfIteratorHelper(this.fields),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var fd = _step4.value;\n\n          if (undefined !== fd.property && 0 < values.length) {\n            dest[fd.property] = values.shift();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n\n  }, {\n    key: \"layoutFor\",\n    value: function layoutFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(this.fields),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var fd = _step5.value;\n\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n\n  }, {\n    key: \"offsetOf\",\n    value: function offsetOf(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var offset = 0;\n\n      var _iterator6 = _createForOfIteratorHelper(this.fields),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var fd = _step6.value;\n\n          if (fd.property === property) {\n            return offset;\n          }\n\n          if (0 > fd.span) {\n            offset = -1;\n          } else if (0 <= offset) {\n            offset += fd.span;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Structure;\n}(Layout);\n\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\n\nvar UnionDiscriminator = /*#__PURE__*/function () {\n  function UnionDiscriminator(property) {\n    _classCallCheck(this, UnionDiscriminator);\n\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n\n\n  _createClass(UnionDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n  }]);\n\n  return UnionDiscriminator;\n}();\n\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\n\nvar UnionLayoutDiscriminator = /*#__PURE__*/function (_UnionDiscriminator) {\n  _inherits(UnionLayoutDiscriminator, _UnionDiscriminator);\n\n  var _super18 = _createSuper(UnionLayoutDiscriminator);\n\n  function UnionLayoutDiscriminator(layout, property) {\n    var _this9;\n\n    _classCallCheck(this, UnionLayoutDiscriminator);\n\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    _this9 = _super18.call(this, property || layout.property || 'variant');\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n\n    _this9.layout = layout;\n    return _this9;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  _createClass(UnionLayoutDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return this.layout.encode(src, b, offset);\n    }\n  }]);\n\n  return UnionLayoutDiscriminator;\n}(UnionDiscriminator);\n\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Union = /*#__PURE__*/function (_Layout16) {\n  _inherits(Union, _Layout16);\n\n  var _super19 = _createSuper(Union);\n\n  function Union(discr, defaultLayout, property) {\n    var _this10;\n\n    _classCallCheck(this, Union);\n\n    var discriminator;\n\n    if (discr instanceof UInt || discr instanceof UIntBE) {\n      discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discriminator = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    } else {\n      discriminator = discr;\n    }\n\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n\n\n    var span = -1;\n\n    if (defaultLayout) {\n      span = defaultLayout.span;\n\n      if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {\n        span += discriminator.layout.span;\n      }\n    }\n\n    _this10 = _super19.call(this, span, property);\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n\n    _this10.discriminator = discriminator;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n\n    _this10.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n\n    _this10.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n\n    _this10.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n\n    var boundGetSourceVariant = _this10.defaultGetSourceVariant.bind(_assertThisInitialized(_this10));\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n\n\n    _this10.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n\n\n    _this10.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n\n    return _this10;\n  }\n  /** @override */\n\n\n  _createClass(Union, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        return this.span;\n      }\n      /* Default layouts always have non-negative span, so we don't have\n       * one and we have to recognize the variant which will in turn\n       * determine the span. */\n\n\n      var vlo = this.getVariant(b, offset);\n\n      if (!vlo) {\n        throw new Error('unable to determine span for unrecognized variant');\n      }\n\n      return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n\n  }, {\n    key: \"defaultGetSourceVariant\",\n    value: function defaultGetSourceVariant(src) {\n      if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n        if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n          return undefined;\n        }\n\n        var vlo = this.registry[src[this.discriminator.property]];\n\n        if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n          return vlo;\n        }\n      } else {\n        for (var tag in this.registry) {\n          var _vlo = this.registry[tag];\n\n          if (_vlo.property && Object.prototype.hasOwnProperty.call(src, _vlo.property)) {\n            return _vlo;\n          }\n        }\n      }\n\n      throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest;\n      var dlo = this.discriminator;\n      var discr = dlo.decode(b, offset);\n      var clo = this.registry[discr];\n\n      if (undefined === clo) {\n        var defaultLayout = this.defaultLayout;\n        var contentOffset = 0;\n\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n\n        dest = this.makeDestinationObject();\n        dest[dlo.property] = discr; // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n      } else {\n        dest = clo.decode(b, offset);\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var vlo = this.getSourceVariant(src);\n\n      if (undefined === vlo) {\n        var dlo = this.discriminator; // this.defaultLayout is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        var clo = this.defaultLayout;\n        var contentOffset = 0;\n\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n\n        dlo.encode(src[dlo.property], b, offset); // clo.property is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n      }\n\n      return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n\n  }, {\n    key: \"addVariant\",\n    value: function addVariant(variant, layout, property) {\n      var rv = new VariantLayout(this, variant, layout, property);\n      this.registry[variant] = rv;\n      return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(vb) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var variant;\n\n      if (vb instanceof Uint8Array) {\n        variant = this.discriminator.decode(vb, offset);\n      } else {\n        variant = vb;\n      }\n\n      return this.registry[variant];\n    }\n  }]);\n\n  return Union;\n}(Layout);\n\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\n\nvar VariantLayout = /*#__PURE__*/function (_Layout17) {\n  _inherits(VariantLayout, _Layout17);\n\n  var _super20 = _createSuper(VariantLayout);\n\n  function VariantLayout(union, variant, layout, property) {\n    var _this11;\n\n    _classCallCheck(this, VariantLayout);\n\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n\n    var span = union.span;\n\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n\n    _this11 = _super20.call(this, span, property);\n    /** The {@link Union} to which this variant belongs. */\n\n    _this11.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n\n    _this11.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n\n    _this11.layout = layout || null;\n    return _this11;\n  }\n  /** @override */\n\n\n  _createClass(VariantLayout, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        /* Will be equal to the containing union span if that is not\n         * variable. */\n        return this.span;\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      /* Span is defined solely by the variant (and prefix discriminator) */\n\n\n      var span = 0;\n\n      if (this.layout) {\n        span = this.layout.getSpan(b, offset + contentOffset);\n      }\n\n      return contentOffset + span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest = this.makeDestinationObject();\n\n      if (this !== this.union.getVariant(b, offset)) {\n        throw new Error('variant mismatch');\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n\n      if (this.layout) {\n        dest[this.property] = this.layout.decode(b, offset + contentOffset);\n      } else if (this.property) {\n        dest[this.property] = true;\n      } else if (this.union.usesPrefixDiscriminator) {\n        dest[this.union.discriminator.property] = this.variant;\n      }\n\n      return dest;\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n\n      if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {\n        throw new TypeError('variant lacks property ' + this.property);\n      }\n\n      this.union.discriminator.encode(this.variant, b, offset);\n      var span = contentOffset;\n\n      if (this.layout) {\n        this.layout.encode(src[this.property], b, offset + contentOffset);\n        span += this.layout.getSpan(b, offset + contentOffset);\n\n        if (0 <= this.union.span && span > this.union.span) {\n          throw new Error('encoded variant overruns containing union');\n        }\n      }\n\n      return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      if (this.layout) {\n        return this.layout.fromArray(values);\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return VariantLayout;\n}(Layout);\n\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\n\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar BitStructure = /*#__PURE__*/function (_Layout18) {\n  _inherits(BitStructure, _Layout18);\n\n  var _super21 = _createSuper(BitStructure);\n\n  function BitStructure(word, msb, property) {\n    var _this12;\n\n    _classCallCheck(this, BitStructure);\n\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = false;\n    }\n\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n\n    _this12 = _super21.call(this, word.span, property);\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n\n    _this12.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n\n    _this12.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n\n    _this12.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n\n    var value = 0;\n\n    _this12._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n\n    _this12._packedGetValue = function () {\n      return value;\n    };\n\n    return _this12;\n  }\n  /** @override */\n\n\n  _createClass(BitStructure, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest = this.makeDestinationObject();\n      var value = this.word.decode(b, offset);\n\n      this._packedSetValue(value);\n\n      var _iterator7 = _createForOfIteratorHelper(this.fields),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var fd = _step7.value;\n\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var value = this.word.decode(b, offset);\n\n      this._packedSetValue(value);\n\n      var _iterator8 = _createForOfIteratorHelper(this.fields),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var fd = _step8.value;\n\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n\n            if (undefined !== fv) {\n              fd.encode(fv);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n\n  }, {\n    key: \"addField\",\n    value: function addField(bits, property) {\n      var bf = new BitField(this, bits, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n\n  }, {\n    key: \"addBoolean\",\n    value: function addBoolean(property) {\n      // This is my Boolean, not the Javascript one.\n      var bf = new Boolean(this, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n\n  }, {\n    key: \"fieldFor\",\n    value: function fieldFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(this.fields),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var fd = _step9.value;\n\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return BitStructure;\n}(Layout);\n\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\n\nvar BitField = /*#__PURE__*/function () {\n  function BitField(container, bits, property) {\n    _classCallCheck(this, BitField);\n\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n\n    var totalBits = 8 * container.span;\n    var usedBits = container.fields.reduce(function (sum, fd) {\n      return sum + fd.bits;\n    }, 0);\n\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n\n\n    this.container = container;\n    /** The span of this value in bits. */\n\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n\n    this.valueMask = (1 << bits) - 1;\n\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n\n\n    this.start = usedBits;\n\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n\n\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n\n\n  _createClass(BitField, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      var word = this.container._packedGetValue();\n\n      var wordValue = fixBitwiseResult(word & this.wordMask);\n      var value = wordValue >>> this.start;\n      return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('number' !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n        throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n      }\n\n      var word = this.container._packedGetValue();\n\n      var wordValue = fixBitwiseResult(value << this.start);\n\n      this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n    }\n  }]);\n\n  return BitField;\n}();\n\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n\n/* eslint-disable no-extend-native */\n\nvar Boolean = /*#__PURE__*/function (_BitField) {\n  _inherits(Boolean, _BitField);\n\n  var _super22 = _createSuper(Boolean);\n\n  function Boolean(container, property) {\n    _classCallCheck(this, Boolean);\n\n    return _super22.call(this, container, 1, property);\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n\n\n  _createClass(Boolean, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return !!_get(_getPrototypeOf(Boolean.prototype), \"decode\", this).call(this, b, offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('boolean' === typeof value) {\n        // BitField requires integer values\n        value = +value;\n      }\n\n      _get(_getPrototypeOf(Boolean.prototype), \"encode\", this).call(this, value);\n    }\n  }]);\n\n  return Boolean;\n}(BitField);\n\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Blob = /*#__PURE__*/function (_Layout19) {\n  _inherits(Blob, _Layout19);\n\n  var _super23 = _createSuper(Blob);\n\n  function Blob(length, property) {\n    var _this13;\n\n    _classCallCheck(this, Blob);\n\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n\n    _this13 = _super23.call(this, span, property);\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n\n    _this13.length = length;\n    return _this13;\n  }\n  /** @override */\n\n\n  _createClass(Blob, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      var span = this.span;\n\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.span;\n\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n\n      return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      var span = this.length;\n\n      if (this.length instanceof ExternalLayout) {\n        span = src.length;\n      }\n\n      if (!(src instanceof Uint8Array && span === src.length)) {\n        throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n      }\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Uint8Array');\n      }\n\n      var srcBuffer = uint8ArrayToBuffer(src);\n      uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n\n      if (this.length instanceof ExternalLayout) {\n        this.length.encode(span, b, offset);\n      }\n\n      return span;\n    }\n  }]);\n\n  return Blob;\n}(Layout);\n\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar CString = /*#__PURE__*/function (_Layout20) {\n  _inherits(CString, _Layout20);\n\n  var _super24 = _createSuper(CString);\n\n  function CString(property) {\n    _classCallCheck(this, CString);\n\n    return _super24.call(this, -1, property);\n  }\n  /** @override */\n\n\n  _createClass(CString, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var idx = offset;\n\n      while (idx < b.length && 0 !== b[idx]) {\n        idx += 1;\n      }\n\n      return 1 + idx - offset;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.getSpan(b, offset);\n      return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n\n      var srcb = buffer_1.Buffer.from(src, 'utf8');\n      var span = srcb.length;\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      var buffer = uint8ArrayToBuffer(b);\n      srcb.copy(buffer, offset);\n      buffer[offset + span] = 0;\n      return span + 1;\n    }\n  }]);\n\n  return CString;\n}(Layout);\n\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UTF8 = /*#__PURE__*/function (_Layout21) {\n  _inherits(UTF8, _Layout21);\n\n  var _super25 = _createSuper(UTF8);\n\n  function UTF8(maxSpan, property) {\n    var _this14;\n\n    _classCallCheck(this, UTF8);\n\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    _this14 = _super25.call(this, -1, property);\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n\n    _this14.maxSpan = maxSpan;\n    return _this14;\n  }\n  /** @override */\n\n\n  _createClass(UTF8, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      return b.length - offset;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.getSpan(b, offset);\n\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n\n      return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n\n      var srcb = buffer_1.Buffer.from(src, 'utf8');\n      var span = srcb.length;\n\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      srcb.copy(uint8ArrayToBuffer(b), offset);\n      return span;\n    }\n  }]);\n\n  return UTF8;\n}(Layout);\n\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Constant = /*#__PURE__*/function (_Layout22) {\n  _inherits(Constant, _Layout22);\n\n  var _super26 = _createSuper(Constant);\n\n  function Constant(value, property) {\n    var _this15;\n\n    _classCallCheck(this, Constant);\n\n    _this15 = _super26.call(this, 0, property);\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n\n    _this15.value = value;\n    return _this15;\n  }\n  /** @override */\n\n\n  _createClass(Constant, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.value;\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      /* Constants take no space */\n      return 0;\n    }\n  }]);\n\n  return Constant;\n}(Layout);\n\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\n\nexports.greedy = function (elementSpan, property) {\n  return new GreedyCount(elementSpan, property);\n};\n/** Factory for {@link OffsetLayout}. */\n\n\nexports.offset = function (layout, offset, property) {\n  return new OffsetLayout(layout, offset, property);\n};\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\n\n\nexports.u8 = function (property) {\n  return new UInt(1, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16 = function (property) {\n  return new UInt(2, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24 = function (property) {\n  return new UInt(3, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32 = function (property) {\n  return new UInt(4, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40 = function (property) {\n  return new UInt(5, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48 = function (property) {\n  return new UInt(6, property);\n};\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64 = function (property) {\n  return new NearUInt64(property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16be = function (property) {\n  return new UIntBE(2, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24be = function (property) {\n  return new UIntBE(3, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32be = function (property) {\n  return new UIntBE(4, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40be = function (property) {\n  return new UIntBE(5, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48be = function (property) {\n  return new UIntBE(6, property);\n};\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64be = function (property) {\n  return new NearUInt64BE(property);\n};\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\n\n\nexports.s8 = function (property) {\n  return new Int(1, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16 = function (property) {\n  return new Int(2, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24 = function (property) {\n  return new Int(3, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32 = function (property) {\n  return new Int(4, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40 = function (property) {\n  return new Int(5, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48 = function (property) {\n  return new Int(6, property);\n};\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64 = function (property) {\n  return new NearInt64(property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16be = function (property) {\n  return new IntBE(2, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24be = function (property) {\n  return new IntBE(3, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32be = function (property) {\n  return new IntBE(4, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40be = function (property) {\n  return new IntBE(5, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48be = function (property) {\n  return new IntBE(6, property);\n};\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64be = function (property) {\n  return new NearInt64BE(property);\n};\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\n\n\nexports.f32 = function (property) {\n  return new Float(property);\n};\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\n\n\nexports.f32be = function (property) {\n  return new FloatBE(property);\n};\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\n\n\nexports.f64 = function (property) {\n  return new Double(property);\n};\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\n\n\nexports.f64be = function (property) {\n  return new DoubleBE(property);\n};\n/** Factory for {@link Structure} values. */\n\n\nexports.struct = function (fields, property, decodePrefixes) {\n  return new Structure(fields, property, decodePrefixes);\n};\n/** Factory for {@link BitStructure} values. */\n\n\nexports.bits = function (word, msb, property) {\n  return new BitStructure(word, msb, property);\n};\n/** Factory for {@link Sequence} values. */\n\n\nexports.seq = function (elementLayout, count, property) {\n  return new Sequence(elementLayout, count, property);\n};\n/** Factory for {@link Union} values. */\n\n\nexports.union = function (discr, defaultLayout, property) {\n  return new Union(discr, defaultLayout, property);\n};\n/** Factory for {@link UnionLayoutDiscriminator} values. */\n\n\nexports.unionLayoutDiscriminator = function (layout, property) {\n  return new UnionLayoutDiscriminator(layout, property);\n};\n/** Factory for {@link Blob} values. */\n\n\nexports.blob = function (length, property) {\n  return new Blob(length, property);\n};\n/** Factory for {@link CString} values. */\n\n\nexports.cstr = function (property) {\n  return new CString(property);\n};\n/** Factory for {@link UTF8} values. */\n\n\nexports.utf8 = function (maxSpan, property) {\n  return new UTF8(maxSpan, property);\n};\n/** Factory for {@link Constant} values. */\n\n\nexports.constant = function (value, property) {\n  return new Constant(value, property);\n};","map":{"version":3,"sources":["../src/Layout.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map"]},"metadata":{},"sourceType":"script"}