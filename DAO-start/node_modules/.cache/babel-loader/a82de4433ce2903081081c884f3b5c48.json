{"ast":null,"code":"import _classCallCheck from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncToGenerator from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport Common, { Hardfork } from '@ethereumjs/common';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { personalSign, signTypedData, SignTypedDataVersion, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { privateToAddress, stripHexPrefix } from 'ethereumjs-util';\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  var getAccounts = _ref.getAccounts,\n      getPrivateKey = _ref.getPrivateKey,\n      processDecryptMessage = _ref.processDecryptMessage,\n      processEncryptionPublicKey = _ref.processEncryptionPublicKey,\n      processEthSignMessage = _ref.processEthSignMessage,\n      processPersonalMessage = _ref.processPersonalMessage,\n      processTransaction = _ref.processTransaction,\n      processSignTransaction = _ref.processSignTransaction,\n      processTypedMessage = _ref.processTypedMessage,\n      processTypedMessageV3 = _ref.processTypedMessageV3,\n      processTypedMessageV4 = _ref.processTypedMessageV4;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  function validateAndNormalizeKeyholder(_x, _x2) {\n    return _validateAndNormalizeKeyholder.apply(this, arguments);\n  } //\n  // account lookups\n  //\n\n\n  function _validateAndNormalizeKeyholder() {\n    _validateAndNormalizeKeyholder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, req) {\n      var accounts, normalizedAccounts, normalizedAddress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof address === \"string\" && address.length > 0)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 3;\n              return getAccounts(req);\n\n            case 3:\n              accounts = _context.sent;\n              normalizedAccounts = accounts.map(function (_address) {\n                return _address.toLowerCase();\n              });\n              normalizedAddress = address.toLowerCase();\n\n              if (!normalizedAccounts.includes(normalizedAddress)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", normalizedAddress);\n\n            case 8:\n              throw ethErrors.rpc.invalidParams({\n                message: \"Invalid parameters: must provide an Ethereum address.\"\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _validateAndNormalizeKeyholder.apply(this, arguments);\n  }\n\n  function lookupAccounts(_x3, _x4) {\n    return _lookupAccounts.apply(this, arguments);\n  }\n\n  function _lookupAccounts() {\n    _lookupAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getAccounts(req);\n\n            case 2:\n              res.result = _context2.sent;\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _lookupAccounts.apply(this, arguments);\n  }\n\n  function lookupDefaultAccount(_x5, _x6) {\n    return _lookupDefaultAccount.apply(this, arguments);\n  } //\n  // transaction signatures\n  //\n\n\n  function _lookupDefaultAccount() {\n    _lookupDefaultAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getAccounts(req);\n\n            case 2:\n              accounts = _context3.sent;\n              res.result = accounts[0] || null;\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _lookupDefaultAccount.apply(this, arguments);\n  }\n\n  function sendTransaction(_x7, _x8) {\n    return _sendTransaction.apply(this, arguments);\n  }\n\n  function _sendTransaction() {\n    _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res) {\n      var txParams;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (processTransaction) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              txParams = req.params[0] || {\n                from: \"\"\n              };\n              _context4.next = 5;\n              return validateAndNormalizeKeyholder(txParams.from, req);\n\n            case 5:\n              txParams.from = _context4.sent;\n              _context4.next = 8;\n              return processTransaction(txParams, req);\n\n            case 8:\n              res.result = _context4.sent;\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _sendTransaction.apply(this, arguments);\n  }\n\n  function signTransaction(_x9, _x10) {\n    return _signTransaction.apply(this, arguments);\n  } //\n  // message signatures\n  //\n\n\n  function _signTransaction() {\n    _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n      var txParams;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (processSignTransaction) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              txParams = req.params[0] || {\n                from: \"\"\n              };\n              _context5.next = 5;\n              return validateAndNormalizeKeyholder(txParams.from, req);\n\n            case 5:\n              txParams.from = _context5.sent;\n              _context5.next = 8;\n              return processSignTransaction(txParams, req);\n\n            case 8:\n              res.result = _context5.sent;\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _signTransaction.apply(this, arguments);\n  }\n\n  function ethSign(_x11, _x12) {\n    return _ethSign.apply(this, arguments);\n  }\n\n  function _ethSign() {\n    _ethSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res) {\n      var address, message, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (processEthSignMessage) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context6.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context6.sent;\n              message = req.params[1];\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n                from: address,\n                data: message\n              });\n              _context6.next = 10;\n              return processEthSignMessage(msgParams, req);\n\n            case 10:\n              res.result = _context6.sent;\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _ethSign.apply(this, arguments);\n  }\n\n  function signTypedData(_x13, _x14) {\n    return _signTypedData.apply(this, arguments);\n  }\n\n  function _signTypedData() {\n    _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req, res) {\n      var message, address, version, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (processTypedMessage) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              message = req.params[0];\n              _context7.next = 5;\n              return validateAndNormalizeKeyholder(req.params[1], req);\n\n            case 5:\n              address = _context7.sent;\n              version = \"V1\";\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n                from: address,\n                data: message\n              });\n              _context7.next = 11;\n              return processTypedMessage(msgParams, req, version);\n\n            case 11:\n              res.result = _context7.sent;\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _signTypedData.apply(this, arguments);\n  }\n\n  function signTypedDataV3(_x15, _x16) {\n    return _signTypedDataV.apply(this, arguments);\n  }\n\n  function _signTypedDataV() {\n    _signTypedDataV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req, res) {\n      var address, message, version, msgParams;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (processTypedMessageV3) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context8.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context8.sent;\n              message = req.params[1];\n              version = \"V3\";\n              msgParams = {\n                data: message,\n                from: address,\n                version: version\n              };\n              _context8.next = 10;\n              return processTypedMessageV3(msgParams, req, version);\n\n            case 10:\n              res.result = _context8.sent;\n\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _signTypedDataV.apply(this, arguments);\n  }\n\n  function signTypedDataV4(_x17, _x18) {\n    return _signTypedDataV2.apply(this, arguments);\n  }\n\n  function _signTypedDataV2() {\n    _signTypedDataV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(req, res) {\n      var address, message, version, msgParams;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (processTypedMessageV4) {\n                _context9.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context9.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context9.sent;\n              message = req.params[1];\n              version = \"V4\";\n              msgParams = {\n                data: message,\n                from: address,\n                version: version\n              };\n              _context9.next = 10;\n              return processTypedMessageV4(msgParams, req, version);\n\n            case 10:\n              res.result = _context9.sent;\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _signTypedDataV2.apply(this, arguments);\n  }\n\n  function personalSign(_x19, _x20) {\n    return _personalSign.apply(this, arguments);\n  }\n\n  function _personalSign() {\n    _personalSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(req, res) {\n      var firstParam, secondParam, extraParams, address, message, warning, msgParams;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (processPersonalMessage) {\n                _context10.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              // process normally\n              firstParam = req.params[0];\n              secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n              extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n              // To gracefully respect users who adopted this API early,\n              // we are currently gracefully recovering from the wrong param order\n              // when it is clearly identifiable.\n              //\n              // That means when the first param is definitely an address,\n              // and the second param is definitely not, but is hex.\n\n              if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n                warning = \"The eth_personalSign method requires params ordered \";\n                warning += \"[message, address]. This was previously handled incorrectly, \";\n                warning += \"and has been corrected automatically. \";\n                warning += \"Please switch this param order for smooth behavior in the future.\";\n                res.warning = warning;\n                address = firstParam;\n                message = secondParam;\n              } else {\n                message = firstParam;\n                address = secondParam;\n              }\n\n              _context10.next = 8;\n              return validateAndNormalizeKeyholder(address, req);\n\n            case 8:\n              address = _context10.sent;\n              msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n                from: address,\n                data: message\n              }); // eslint-disable-next-line require-atomic-updates\n\n              _context10.next = 12;\n              return processPersonalMessage(msgParams, req);\n\n            case 12:\n              res.result = _context10.sent;\n\n            case 13:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _personalSign.apply(this, arguments);\n  }\n\n  function encryptionPublicKey(_x21, _x22) {\n    return _encryptionPublicKey.apply(this, arguments);\n  }\n\n  function _encryptionPublicKey() {\n    _encryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(req, res) {\n      var address;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (processEncryptionPublicKey) {\n                _context11.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context11.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context11.sent;\n              _context11.next = 7;\n              return processEncryptionPublicKey(address, req);\n\n            case 7:\n              res.result = _context11.sent;\n\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _encryptionPublicKey.apply(this, arguments);\n  }\n\n  function decryptMessage(_x23, _x24) {\n    return _decryptMessage.apply(this, arguments);\n  }\n\n  function _decryptMessage() {\n    _decryptMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(req, res) {\n      var ciphertext, address, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (processDecryptMessage) {\n                _context12.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              ciphertext = req.params[0];\n              _context12.next = 5;\n              return validateAndNormalizeKeyholder(req.params[1], req);\n\n            case 5:\n              address = _context12.sent;\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n                from: address,\n                data: ciphertext\n              });\n              res.result = processDecryptMessage(msgParams, req);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n    return _decryptMessage.apply(this, arguments);\n  }\n\n  function fetchPrivateKey(_x25, _x26) {\n    return _fetchPrivateKey.apply(this, arguments);\n  }\n\n  function _fetchPrivateKey() {\n    _fetchPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (getPrivateKey) {\n                _context13.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              res.result = getPrivateKey(req);\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _fetchPrivateKey.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  var getAccounts = providerHandlers.getAccounts,\n      getPrivateKey = providerHandlers.getPrivateKey,\n      processTransaction = providerHandlers.processTransaction,\n      processEthSignMessage = providerHandlers.processEthSignMessage,\n      processTypedMessage = providerHandlers.processTypedMessage,\n      processTypedMessageV3 = providerHandlers.processTypedMessageV3,\n      processTypedMessageV4 = providerHandlers.processTypedMessageV4,\n      processPersonalMessage = providerHandlers.processPersonalMessage,\n      processEncryptionPublicKey = providerHandlers.processEncryptionPublicKey,\n      processDecryptMessage = providerHandlers.processDecryptMessage;\n  var ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts: getAccounts,\n    getPrivateKey: getPrivateKey,\n    processTransaction: processTransaction,\n    processEthSignMessage: processEthSignMessage,\n    processTypedMessage: processTypedMessage,\n    processTypedMessageV3: processTypedMessageV3,\n    processTypedMessageV4: processTypedMessageV4,\n    processPersonalMessage: processPersonalMessage,\n    processEncryptionPublicKey: processEncryptionPublicKey,\n    processDecryptMessage: processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\n\nfunction createChainSwitchMiddleware(_ref) {\n  var addChain = _ref.addChain,\n      switchChain = _ref.switchChain;\n\n  function addNewChain(_x27, _x28) {\n    return _addNewChain.apply(this, arguments);\n  }\n\n  function _addNewChain() {\n    _addNewChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(req, res) {\n      var _req$params, chainParams;\n\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n\n              if (chainParams) {\n                _context14.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n\n            case 3:\n              if (chainParams.chainId) {\n                _context14.next = 5;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n\n            case 5:\n              if (!(!chainParams.rpcUrls || chainParams.rpcUrls.length === 0)) {\n                _context14.next = 7;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n\n            case 7:\n              if (chainParams.nativeCurrency) {\n                _context14.next = 9;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n            case 9:\n              _context14.next = 11;\n              return addChain(chainParams);\n\n            case 11:\n              res.result = _context14.sent;\n\n            case 12:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _addNewChain.apply(this, arguments);\n  }\n\n  function updateChain(_x29, _x30) {\n    return _updateChain.apply(this, arguments);\n  }\n\n  function _updateChain() {\n    _updateChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(req, res) {\n      var _req$params2, chainParams;\n\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n\n              if (chainParams) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n\n            case 3:\n              _context15.next = 5;\n              return switchChain(chainParams);\n\n            case 5:\n              res.result = _context15.sent;\n\n            case 6:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n    return _updateChain.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\n\nfunction createAccountMiddleware(_ref2) {\n  var updatePrivatekey = _ref2.updatePrivatekey;\n\n  function updateAccount(_x31, _x32) {\n    return _updateAccount.apply(this, arguments);\n  }\n\n  function _updateAccount() {\n    _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(req, res) {\n      var _req$params3, accountParams;\n\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n\n              if (accountParams !== null && accountParams !== void 0 && accountParams.privateKey) {\n                _context16.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n\n            case 3:\n              _context16.next = 5;\n              return updatePrivatekey(accountParams);\n\n            case 5:\n              res.result = _context16.sent;\n\n            case 6:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }));\n    return _updateAccount.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\n\nfunction createChainIdMiddleware(chainId) {\n  return function (req, res, next, end) {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return function (req, res, next, end) {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  var chainId = providerConfig.chainId,\n      rpcTarget = providerConfig.rpcTarget;\n  var fetchMiddleware = createFetchMiddleware({\n    rpcTarget: rpcTarget\n  });\n  var networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware: networkMiddleware,\n    fetchMiddleware: fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  var connector = _ref.connector;\n  return {\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      function getPrivateKey() {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(_) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                accounts = connector.accounts;\n\n                if (!(accounts && accounts.length)) {\n                  _context18.next = 3;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\", accounts);\n\n              case 3:\n                throw new Error(\"Failed to get accounts\");\n\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function getAccounts(_x33) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    processTransaction: function () {\n      var _processTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(txParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return connector.sendTransaction(txParams);\n\n              case 2:\n                result = _context19.sent;\n                return _context19.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function processTransaction(_x34, _x35) {\n        return _processTransaction.apply(this, arguments);\n      }\n\n      return processTransaction;\n    }(),\n    processSignTransaction: function () {\n      var _processSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(txParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return connector.signTransaction(txParams);\n\n              case 2:\n                result = _context20.sent;\n                return _context20.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      function processSignTransaction(_x36, _x37) {\n        return _processSignTransaction.apply(this, arguments);\n      }\n\n      return processSignTransaction;\n    }(),\n    processEthSignMessage: function () {\n      var _processEthSignMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return connector.signMessage([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context21.sent;\n                return _context21.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      }));\n\n      function processEthSignMessage(_x38, _x39) {\n        return _processEthSignMessage.apply(this, arguments);\n      }\n\n      return processEthSignMessage;\n    }(),\n    processPersonalMessage: function () {\n      var _processPersonalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return connector.signPersonalMessage([msgParams.data, msgParams.from]);\n\n              case 2:\n                result = _context22.sent;\n                return _context22.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      }));\n\n      function processPersonalMessage(_x40, _x41) {\n        return _processPersonalMessage.apply(this, arguments);\n      }\n\n      return processPersonalMessage;\n    }(),\n    processTypedMessage: function () {\n      var _processTypedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                log.debug(\"processTypedMessage\", msgParams);\n                _context23.next = 3;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 3:\n                result = _context23.sent;\n                return _context23.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      }));\n\n      function processTypedMessage(_x42, _x43) {\n        return _processTypedMessage.apply(this, arguments);\n      }\n\n      return processTypedMessage;\n    }(),\n    processTypedMessageV3: function () {\n      var _processTypedMessageV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(_) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      function processTypedMessageV3(_x44) {\n        return _processTypedMessageV.apply(this, arguments);\n      }\n\n      return processTypedMessageV3;\n    }(),\n    processTypedMessageV4: function () {\n      var _processTypedMessageV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(_) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25);\n      }));\n\n      function processTypedMessageV4(_x45) {\n        return _processTypedMessageV2.apply(this, arguments);\n      }\n\n      return processTypedMessageV4;\n    }(),\n    processEncryptionPublicKey: function () {\n      var _processEncryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(_) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      }));\n\n      function processEncryptionPublicKey(_x46) {\n        return _processEncryptionPublicKey.apply(this, arguments);\n      }\n\n      return processEncryptionPublicKey;\n    }(),\n    processDecryptMessage: function processDecryptMessage(_) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar WalletConnectProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(WalletConnectProvider, _BaseProvider);\n\n  var _super = _createSuper(WalletConnectProvider);\n\n  function WalletConnectProvider(_ref) {\n    var _this;\n\n    _classCallCheck(this, WalletConnectProvider);\n\n    var config = _ref.config,\n        state = _ref.state,\n        connector = _ref.connector;\n    _this = _super.call(this, {\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: _objectSpread$1(_objectSpread$1({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connector\", null);\n\n    _this.connector = connector || null;\n    return _this;\n  }\n\n  _createClass(WalletConnectProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (this.connector) {\n                  _context27.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n                  code: 4902\n                });\n\n              case 2:\n                _context27.next = 4;\n                return this.setupProvider(this.connector);\n\n              case 4:\n                return _context27.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function enable() {\n        return _enable.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(connector) {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                this.onConnectorStateUpdate(connector);\n                _context28.next = 3;\n                return this.setupEngine(connector);\n\n              case 3:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function setupProvider(_x47) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(_ref2) {\n        var chainId, currentChainConfig, ticker, tickerName, rpcTarget;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                chainId = _ref2.chainId;\n                currentChainConfig = this.getChainConfig(chainId);\n                ticker = currentChainConfig.ticker, tickerName = currentChainConfig.tickerName, rpcTarget = currentChainConfig.rpcTarget;\n                this.update({\n                  chainId: \"loading\"\n                });\n                _context29.next = 6;\n                return this.connector.updateChain({\n                  chainId: Number.parseInt(chainId, 16),\n                  nativeCurrency: {\n                    name: tickerName,\n                    symbol: ticker\n                  },\n                  networkId: Number.parseInt(chainId, 10),\n                  rpcUrl: rpcTarget\n                });\n\n              case 6:\n                this.configure({\n                  chainConfig: currentChainConfig\n                });\n                _context29.next = 9;\n                return this.lookupNetwork(this.connector);\n\n              case 9:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function switchChain(_x48) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(connector) {\n        var chainId, connectedHexChainId;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                if (connector.connected) {\n                  _context30.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n              case 2:\n                if (this.provider) {\n                  _context30.next = 4;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 4:\n                chainId = this.config.chainConfig.chainId;\n                connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n\n                if (!(chainId !== connectedHexChainId)) {\n                  _context30.next = 8;\n                  break;\n                }\n\n                throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n\n              case 8:\n                this.update({\n                  chainId: connectedHexChainId\n                });\n                this.provider.emit(\"connect\", {\n                  chainId: chainId\n                });\n                this.provider.emit(\"chainChanged\", this.state.chainId);\n                return _context30.abrupt(\"return\", connectedHexChainId);\n\n              case 12:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function lookupNetwork(_x49) {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"setupEngine\",\n    value: function () {\n      var _setupEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(connector) {\n        var providerHandlers, ethMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                providerHandlers = getProviderHandlers$1({\n                  connector: connector\n                });\n                this.update({\n                  accounts: connector.accounts || []\n                });\n                ethMiddleware = createEthMiddleware(providerHandlers);\n                engine = new JRPCEngine();\n                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;\n                engine.push(ethMiddleware);\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context31.next = 11;\n                return this.lookupNetwork(connector);\n\n              case 11:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function setupEngine(_x50) {\n        return _setupEngine.apply(this, arguments);\n      }\n\n      return setupEngine;\n    }()\n  }, {\n    key: \"onConnectorStateUpdate\",\n    value: function () {\n      var _onConnectorStateUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(connector) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                connector.on(\"session_update\", /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(error, payload) {\n                    var accounts, connectedChainId, rpcUrl, connectedHexChainId;\n                    return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n                      while (1) {\n                        switch (_context32.prev = _context32.next) {\n                          case 0:\n                            if (_this2.provider) {\n                              _context32.next = 2;\n                              break;\n                            }\n\n                            throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n                          case 2:\n                            if (!error) {\n                              _context32.next = 5;\n                              break;\n                            }\n\n                            _this2.provider.emit(\"error\", error);\n\n                            return _context32.abrupt(\"return\");\n\n                          case 5:\n                            accounts = payload.accounts, connectedChainId = payload.chainId, rpcUrl = payload.rpcUrl; // Check if accounts changed and trigger event\n\n                            if (accounts !== null && accounts !== void 0 && accounts.length && _this2.state.accounts[0] !== accounts[0]) {\n                              _this2.update({\n                                accounts: accounts\n                              }); // await this.setupEngine(connector);\n\n\n                              _this2.provider.emit(\"accountsChanged\", accounts);\n                            }\n\n                            connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n                            if (!(connectedChainId && _this2.state.chainId !== connectedHexChainId)) {\n                              _context32.next = 12;\n                              break;\n                            }\n\n                            // Handle rpcUrl update\n                            _this2.configure({\n                              chainConfig: _objectSpread$1(_objectSpread$1({}, _this2.config.chainConfig), {}, {\n                                chainId: connectedHexChainId,\n                                rpcTarget: rpcUrl\n                              })\n                            });\n\n                            _context32.next = 12;\n                            return _this2.setupEngine(connector);\n\n                          case 12:\n                          case \"end\":\n                            return _context32.stop();\n                        }\n                      }\n                    }, _callee32);\n                  }));\n\n                  return function (_x52, _x53) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n\n              case 1:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33);\n      }));\n\n      function onConnectorStateUpdate(_x51) {\n        return _onConnectorStateUpdate.apply(this, arguments);\n      }\n\n      return onConnectorStateUpdate;\n    }()\n  }]);\n\n  return WalletConnectProvider;\n}(BaseProvider);\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            providerFactory = new WalletConnectProvider({\n              config: {\n                chainConfig: params.chainConfig\n              }\n            });\n            _context34.next = 3;\n            return providerFactory.setupProvider(params.connector);\n\n          case 3:\n            return _context34.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context34.stop();\n        }\n      }\n    }, _callee34);\n  }));\n\n  return function (_x54) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\nfunction getCommonConfiguration(_x55, _x56) {\n  return _getCommonConfiguration.apply(this, arguments);\n}\n\nfunction _getCommonConfiguration() {\n  _getCommonConfiguration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(supportsEIP1559, chainConfig) {\n    var name, chainId, hardfork, customChainParams;\n    return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n      while (1) {\n        switch (_context54.prev = _context54.next) {\n          case 0:\n            name = chainConfig.displayName, chainId = chainConfig.chainId;\n            hardfork = supportsEIP1559 ? Hardfork.London : Hardfork.Berlin;\n            customChainParams = {\n              name: name,\n              chainId: chainId === \"loading\" ? 0 : parseInt(chainId, 16),\n              networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 10),\n              hardfork: hardfork\n            };\n            return _context54.abrupt(\"return\", Common.custom(customChainParams));\n\n          case 4:\n          case \"end\":\n            return _context54.stop();\n        }\n      }\n    }, _callee54);\n  }));\n  return _getCommonConfiguration.apply(this, arguments);\n}\n\nfunction getProviderHandlers(_ref) {\n  var privKey = _ref.privKey,\n      chainConfig = _ref.chainConfig,\n      getProviderEngineProxy = _ref.getProviderEngineProxy;\n  return {\n    getAccounts: function () {\n      var _getAccounts2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(_) {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                return _context35.abrupt(\"return\", [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))]);\n\n              case 1:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      }));\n\n      function getAccounts(_x57) {\n        return _getAccounts2.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    getPrivateKey: function () {\n      var _getPrivateKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(_) {\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                return _context36.abrupt(\"return\", privKey);\n\n              case 1:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36);\n      }));\n\n      function getPrivateKey(_x58) {\n        return _getPrivateKey2.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    processTransaction: function () {\n      var _processTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(txParams, _) {\n        var providerEngineProxy, common, unsignedEthTx, signedTx, txHash;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context37.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 3:\n                _context37.next = 5;\n                return getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n\n              case 5:\n                common = _context37.sent;\n                unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n                  common: common\n                });\n                signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n                _context37.next = 10;\n                return providerEngineProxy.request({\n                  method: \"eth_sendRawTransaction\",\n                  params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n                });\n\n              case 10:\n                txHash = _context37.sent;\n                return _context37.abrupt(\"return\", txHash);\n\n              case 12:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37);\n      }));\n\n      function processTransaction(_x59, _x60) {\n        return _processTransaction2.apply(this, arguments);\n      }\n\n      return processTransaction;\n    }(),\n    processSignTransaction: function () {\n      var _processSignTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(txParams, _) {\n        var common, unsignedEthTx, signedTx;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n\n              case 2:\n                common = _context38.sent;\n                unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n                  common: common\n                });\n                signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n                return _context38.abrupt(\"return\", \"0x\".concat(signedTx.toString(\"hex\")));\n\n              case 6:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38);\n      }));\n\n      function processSignTransaction(_x61, _x62) {\n        return _processSignTransaction2.apply(this, arguments);\n      }\n\n      return processSignTransaction;\n    }(),\n    processEthSignMessage: function () {\n      var _processEthSignMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(msgParams, _) {\n        var rawMessageSig;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                rawMessageSig = signMessage(privKey, msgParams.data);\n                return _context39.abrupt(\"return\", rawMessageSig);\n\n              case 2:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39);\n      }));\n\n      function processEthSignMessage(_x63, _x64) {\n        return _processEthSignMessage2.apply(this, arguments);\n      }\n\n      return processEthSignMessage;\n    }(),\n    processPersonalMessage: function () {\n      var _processPersonalMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(msgParams, _) {\n        var privKeyBuffer, sig;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                sig = personalSign({\n                  privateKey: privKeyBuffer,\n                  data: msgParams.data\n                });\n                return _context40.abrupt(\"return\", sig);\n\n              case 3:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40);\n      }));\n\n      function processPersonalMessage(_x65, _x66) {\n        return _processPersonalMessage2.apply(this, arguments);\n      }\n\n      return processPersonalMessage;\n    }(),\n    processTypedMessage: function () {\n      var _processTypedMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(msgParams, _) {\n        var privKeyBuffer, sig;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                log.debug(\"processTypedMessage\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: msgParams.data,\n                  version: SignTypedDataVersion.V1\n                });\n                return _context41.abrupt(\"return\", sig);\n\n              case 4:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41);\n      }));\n\n      function processTypedMessage(_x67, _x68) {\n        return _processTypedMessage2.apply(this, arguments);\n      }\n\n      return processTypedMessage;\n    }(),\n    processTypedMessageV3: function () {\n      var _processTypedMessageV3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(msgParams, _) {\n        var privKeyBuffer, sig;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                log.debug(\"processTypedMessageV3\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: msgParams.data,\n                  version: SignTypedDataVersion.V3\n                });\n                return _context42.abrupt(\"return\", sig);\n\n              case 4:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42);\n      }));\n\n      function processTypedMessageV3(_x69, _x70) {\n        return _processTypedMessageV3.apply(this, arguments);\n      }\n\n      return processTypedMessageV3;\n    }(),\n    processTypedMessageV4: function () {\n      var _processTypedMessageV4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(msgParams, _) {\n        var privKeyBuffer, sig;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                log.debug(\"processTypedMessageV4\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: msgParams.data,\n                  version: SignTypedDataVersion.V4\n                });\n                return _context43.abrupt(\"return\", sig);\n\n              case 4:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43);\n      }));\n\n      function processTypedMessageV4(_x71, _x72) {\n        return _processTypedMessageV4.apply(this, arguments);\n      }\n\n      return processTypedMessageV4;\n    }(),\n    processEncryptionPublicKey: function () {\n      var _processEncryptionPublicKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(address, _) {\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                log.info(\"processEncryptionPublicKey\", address);\n                return _context44.abrupt(\"return\", getEncryptionPublicKey(privKey));\n\n              case 2:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44);\n      }));\n\n      function processEncryptionPublicKey(_x73, _x74) {\n        return _processEncryptionPublicKey2.apply(this, arguments);\n      }\n\n      return processEncryptionPublicKey;\n    }(),\n    processDecryptMessage: function processDecryptMessage(msgParams, _) {\n      log.info(\"processDecryptMessage\", msgParams);\n      var stripped = stripHexPrefix(msgParams.data);\n      var buff = Buffer.from(stripped, \"hex\");\n      var decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar EthereumPrivateKeyProvider = /*#__PURE__*/function (_BaseProvider2) {\n  _inherits(EthereumPrivateKeyProvider, _BaseProvider2);\n\n  var _super2 = _createSuper(EthereumPrivateKeyProvider);\n\n  function EthereumPrivateKeyProvider(_ref) {\n    _classCallCheck(this, EthereumPrivateKeyProvider);\n\n    var config = _ref.config,\n        state = _ref.state;\n    return _super2.call(this, {\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: state\n    });\n  }\n\n  _createClass(EthereumPrivateKeyProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45() {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                if (this.state.privateKey) {\n                  _context45.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Private key is not found in state, plz pass it in constructor state param\",\n                  code: 4902\n                });\n\n              case 2:\n                _context45.next = 4;\n                return this.setupProvider(this.state.privateKey);\n\n              case 4:\n                return _context45.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function enable() {\n        return _enable2.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(privKey) {\n        var providerHandlers, ethMiddleware, chainSwitchMiddleware, engine, _createJsonRpcClient2, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                providerHandlers = getProviderHandlers({\n                  privKey: privKey,\n                  chainConfig: this.config.chainConfig,\n                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n                });\n                ethMiddleware = createEthMiddleware(providerHandlers);\n                chainSwitchMiddleware = this.getChainSwitchMiddleware();\n                engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n                _createJsonRpcClient2 = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient2.networkMiddleware;\n                engine.push(ethMiddleware);\n                engine.push(chainSwitchMiddleware);\n                engine.push(this.getAccountMiddleware());\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context46.next = 13;\n                return this.lookupNetwork();\n\n              case 13:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function setupProvider(_x75) {\n        return _setupProvider2.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"updateAccount\",\n    value: function () {\n      var _updateAccount2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(params) {\n        var existingKey;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context47.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                _context47.next = 4;\n                return this._providerEngineProxy.request({\n                  method: \"eth_private_key\"\n                });\n\n              case 4:\n                existingKey = _context47.sent;\n\n                if (!(existingKey !== params.privateKey)) {\n                  _context47.next = 14;\n                  break;\n                }\n\n                _context47.next = 8;\n                return this.setupProvider(params.privateKey);\n\n              case 8:\n                _context47.t0 = this._providerEngineProxy;\n                _context47.next = 11;\n                return this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                });\n\n              case 11:\n                _context47.t1 = _context47.sent;\n                _context47.t2 = {\n                  accounts: _context47.t1\n                };\n\n                _context47.t0.emit.call(_context47.t0, \"accountsChanged\", _context47.t2);\n\n              case 14:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function updateAccount(_x76) {\n        return _updateAccount2.apply(this, arguments);\n      }\n\n      return updateAccount;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(params) {\n        var chainConfig, privKey;\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context48.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainConfig = this.getChainConfig(params.chainId);\n                this.update({\n                  chainId: \"loading\"\n                });\n                this.configure({\n                  chainConfig: chainConfig\n                });\n                _context48.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"eth_private_key\"\n                });\n\n              case 7:\n                privKey = _context48.sent;\n                _context48.next = 10;\n                return this.setupProvider(privKey);\n\n              case 10:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      function switchChain(_x77) {\n        return _switchChain2.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49() {\n        var chainId, network;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                if (this.provider) {\n                  _context49.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainId = this.config.chainConfig.chainId;\n\n                if (chainId) {\n                  _context49.next = 5;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n\n              case 5:\n                _context49.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"net_version\",\n                  params: []\n                });\n\n              case 7:\n                network = _context49.sent;\n\n                if (!(parseInt(chainId, 16) !== parseInt(network, 10))) {\n                  _context49.next = 10;\n                  break;\n                }\n\n                throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n\n              case 10:\n                log.debug(\"this provider\", this.provider, chainId, this.state.chainId);\n\n                if (this.state.chainId !== chainId) {\n                  this.provider.emit(\"chainChanged\", chainId);\n                  this.provider.emit(\"connect\", {\n                    chainId: chainId\n                  });\n                }\n\n                this.update({\n                  chainId: chainId\n                });\n                return _context49.abrupt(\"return\", network);\n\n              case 14:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function lookupNetwork() {\n        return _lookupNetwork2.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"getChainSwitchMiddleware\",\n    value: function getChainSwitchMiddleware() {\n      var _this3 = this;\n\n      var chainSwitchHandlers = {\n        addChain: function () {\n          var _addChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(params) {\n            var chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency;\n            return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n              while (1) {\n                switch (_context50.prev = _context50.next) {\n                  case 0:\n                    chainId = params.chainId, chainName = params.chainName, rpcUrls = params.rpcUrls, blockExplorerUrls = params.blockExplorerUrls, nativeCurrency = params.nativeCurrency;\n\n                    _this3.addChain({\n                      chainNamespace: \"eip155\",\n                      chainId: chainId,\n                      ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n                      tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n                      displayName: chainName,\n                      rpcTarget: rpcUrls[0],\n                      blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context50.stop();\n                }\n              }\n            }, _callee50);\n          }));\n\n          function addChain(_x78) {\n            return _addChain.apply(this, arguments);\n          }\n\n          return addChain;\n        }(),\n        switchChain: function () {\n          var _switchChain3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(params) {\n            var chainId;\n            return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n              while (1) {\n                switch (_context51.prev = _context51.next) {\n                  case 0:\n                    chainId = params.chainId;\n                    _context51.next = 3;\n                    return _this3.switchChain({\n                      chainId: chainId\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context51.stop();\n                }\n              }\n            }, _callee51);\n          }));\n\n          function switchChain(_x79) {\n            return _switchChain3.apply(this, arguments);\n          }\n\n          return switchChain;\n        }()\n      };\n      var chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n      return chainSwitchMiddleware;\n    }\n  }, {\n    key: \"getAccountMiddleware\",\n    value: function getAccountMiddleware() {\n      var _this4 = this;\n\n      var accountHandlers = {\n        updatePrivatekey: function () {\n          var _updatePrivatekey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(params) {\n            var privateKey;\n            return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n              while (1) {\n                switch (_context52.prev = _context52.next) {\n                  case 0:\n                    privateKey = params.privateKey;\n                    _context52.next = 3;\n                    return _this4.updateAccount({\n                      privateKey: privateKey\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context52.stop();\n                }\n              }\n            }, _callee52);\n          }));\n\n          function updatePrivatekey(_x80) {\n            return _updatePrivatekey.apply(this, arguments);\n          }\n\n          return updatePrivatekey;\n        }()\n      };\n      return createAccountMiddleware(accountHandlers);\n    }\n  }]);\n\n  return EthereumPrivateKeyProvider;\n}(BaseProvider);\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n      while (1) {\n        switch (_context53.prev = _context53.next) {\n          case 0:\n            providerFactory = new EthereumPrivateKeyProvider({\n              config: {\n                chainConfig: params.chainConfig\n              }\n            });\n            _context53.next = 3;\n            return providerFactory.setupProvider(params.privKey);\n\n          case 3:\n            return _context53.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context53.stop();\n        }\n      }\n    }, _callee53);\n  }));\n\n  return function (_x81) {\n    return _ref5.apply(this, arguments);\n  };\n}());\n\nexport { EthereumPrivateKeyProvider, WalletConnectProvider };","map":{"version":3,"sources":["../src/rpc/walletMidddleware.ts","../src/rpc/ethRpcMiddlewares.ts","../src/rpc/jrpcClient.ts","../src/providers/injectedProviders/walletConnectUtils.ts","../src/providers/injectedProviders/WalletConnectProvider.ts","../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"names":["str","createWalletMiddleware","processTypedMessageV4","address","accounts","getAccounts","normalizedAccounts","_address","normalizedAddress","message","res","ethErrors","txParams","req","from","validateAndNormalizeKeyholder","processTransaction","processSignTransaction","extraParams","msgParams","data","processEthSignMessage","version","processTypedMessage","processTypedMessageV3","firstParam","secondParam","resemblesAddress","warning","processPersonalMessage","processEncryptionPublicKey","ciphertext","processDecryptMessage","getPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","switchChain","chainParams","addChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","accountParams","wallet_updateAccount","createChainIdMiddleware","chainId","end","next","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","connector","result","log","_","WalletConnectProvider","BaseProvider","constructor","config","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","state","providerFactory","params","enable","code","method","setupProvider","currentChainConfig","Number","nativeCurrency","name","symbol","ticker","networkId","rpcUrl","lookupNetwork","WalletLoginError","connectedHexChainId","isHexStrict","WalletInitializationError","setupEngine","engine","provider","providerFromEngine","onConnectorStateUpdate","connectedChainId","displayName","hardfork","supportsEIP1559","Hardfork","customChainParams","parseInt","Common","getProviderEngineProxy","privateToAddress","Buffer","providerEngineProxy","common","getCommonConfiguration","unsignedEthTx","signedTx","txHash","rawMessageSig","signMessage","privKeyBuffer","sig","personalSign","privateKey","signTypedData","SignTypedDataVersion","V1","V3","V4","getEncryptionPublicKey","stripped","stripHexPrefix","buff","decrypted","decrypt","encryptedData","JSON","privKey","EthereumPrivateKeyProvider","chainSwitchMiddleware","updateAccount","existingKey","network","getChainSwitchMiddleware","chainSwitchHandlers","tickerName","rpcUrls","blockExplorer","getAccountMiddleware","accountHandlers"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport Common, { Hardfork } from '@ethereumjs/common';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { personalSign, signTypedData, SignTypedDataVersion, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { privateToAddress, stripHexPrefix } from 'ethereumjs-util';\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n\n    throw ethErrors.rpc.invalidParams({\n      message: \"Invalid parameters: must provide an Ethereum address.\"\n    });\n  } //\n  // account lookups\n  //\n\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  } //\n  // transaction signatures\n  //\n\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  } //\n  // message signatures\n  //\n\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    } // process normally\n\n\n    const firstParam = req.params[0];\n    const secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n\n    let address, message;\n\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = \"The eth_personalSign method requires params ordered \";\n      warning += \"[message, address]. This was previously handled incorrectly, \";\n      warning += \"and has been corrected automatically. \";\n      warning += \"Please switch this param order for smooth behavior in the future.\";\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    }); // eslint-disable-next-line require-atomic-updates\n\n\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n\n  async function addNewChain(req, res) {\n    var _req$params;\n\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n\n  async function updateChain(req, res) {\n    var _req$params2;\n\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n\n  async function updateAccount(req, res) {\n    var _req$params3;\n\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processTypedMessageV4: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: _objectSpread$1(_objectSpread$1({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId\n    } = _ref2;\n    const currentChainConfig = this.getChainConfig(chainId);\n    const {\n      ticker,\n      tickerName,\n      rpcTarget\n    } = currentChainConfig;\n    this.update({\n      chainId: \"loading\"\n    });\n    await this.connector.updateChain({\n      chainId: Number.parseInt(chainId, 16),\n      nativeCurrency: {\n        name: tickerName,\n        symbol: ticker\n      },\n      networkId: Number.parseInt(chainId, 10),\n      rpcUrl: rpcTarget\n    });\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    await this.lookupNetwork(this.connector);\n  }\n\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$1({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(connector);\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload; // Check if accounts changed and trigger event\n\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        }); // await this.setupEngine(connector);\n\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n\n      const connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nasync function getCommonConfiguration(supportsEIP1559, chainConfig) {\n  const {\n    displayName: name,\n    chainId\n  } = chainConfig;\n  const hardfork = supportsEIP1559 ? Hardfork.London : Hardfork.Berlin;\n  const customChainParams = {\n    name,\n    chainId: chainId === \"loading\" ? 0 : parseInt(chainId, 16),\n    networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 10),\n    hardfork\n  };\n  return Common.custom(customChainParams);\n}\n\nfunction getProviderHandlers(_ref) {\n  let {\n    privKey,\n    chainConfig,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n        common\n      });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n        common\n      });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      return \"0x\".concat(signedTx.toString(\"hex\"));\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = getProviderHandlers({\n      privKey,\n      chainConfig: this.config.chainConfig,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n    log.debug(\"this provider\", this.provider, chainId, this.state.chainId);\n\n    if (this.state.chainId !== chainId) {\n      this.provider.emit(\"chainChanged\", chainId);\n      this.provider.emit(\"connect\", {\n        chainId\n      });\n    }\n\n    this.update({\n      chainId\n    });\n    return network;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, WalletConnectProvider };\n//# sourceMappingURL=ethereumProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}