{"ast":null,"code":"import _asyncToGenerator from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/shash24/Desktop/Blockchain/Dao/DAO-start/node_modules/@babel/runtime/regenerator/index.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nvar MetamaskAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(MetamaskAdapter, _BaseAdapter);\n\n  var _super = _createSuper(MetamaskAdapter);\n\n  function MetamaskAdapter() {\n    var _this;\n\n    _classCallCheck(this, MetamaskAdapter);\n\n    var adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"rehydrated\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"metamaskProvider\", null);\n\n    _this.chainConfig = adapterOptions.chainConfig || null;\n    return _this;\n  }\n\n  _createClass(MetamaskAdapter, [{\n    key: \"provider\",\n    get: function get() {\n      if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n        return this.metamaskProvider;\n      }\n\n      return null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(MetamaskAdapter.prototype), \"checkInitializationRequirements\", this).call(this);\n\n                _context.next = 3;\n                return detectEthereumProvider({\n                  mustBeMetaMask: true\n                });\n\n              case 3:\n                this.metamaskProvider = _context.sent;\n\n                if (this.metamaskProvider) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n\n              case 6:\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n                _context.prev = 8;\n\n                if (!options.autoConnect) {\n                  _context.next = 13;\n                  break;\n                }\n\n                this.rehydrated = true;\n                _context.next = 13;\n                return this.connect();\n\n              case 13:\n                _context.next = 18;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](8);\n                this.emit(ADAPTER_EVENTS.ERRORED, _context.t0);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 15]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(_) {}\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var chainId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(MetamaskAdapter.prototype), \"checkConnectionRequirements\", this).call(this); // set default to mainnet\n\n\n                if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, {\n                  adapter: WALLET_ADAPTERS.METAMASK\n                });\n\n                if (this.metamaskProvider) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n              case 6:\n                _context2.prev = 6;\n                _context2.next = 9;\n                return this.metamaskProvider.request({\n                  method: \"eth_requestAccounts\"\n                });\n\n              case 9:\n                chainId = this.metamaskProvider.chainId;\n\n                if (!(chainId !== this.chainConfig.chainId)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 13;\n                return this.switchChain(this.chainConfig);\n\n              case 13:\n                this.status = ADAPTER_STATUS.CONNECTED;\n\n                if (this.provider) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n\n              case 16:\n                this.provider.once(\"disconnect\", function () {\n                  // ready to be connected again\n                  _this2.disconnect();\n                });\n                this.emit(ADAPTER_EVENTS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.METAMASK,\n                  reconnected: this.rehydrated\n                });\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t0 = _context2[\"catch\"](6);\n                // ready again to be connected\n                this.status = ADAPTER_STATUS.READY;\n                this.rehydrated = false;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n                throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 21]]);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this$provider,\n            options,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n\n              case 3:\n                (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n                if (options.cleanup) {\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.metamaskProvider = null;\n                } else {\n                  // ready to be connected again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.rehydrated = false;\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n\n              case 2:\n                return _context4.abrupt(\"return\", {});\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(chainConfig) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.metamaskProvider) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                _context5.prev = 2;\n                _context5.next = 5;\n                return this.metamaskProvider.request({\n                  method: \"wallet_switchEthereumChain\",\n                  params: [{\n                    chainId: chainConfig.chainId\n                  }]\n                });\n\n              case 5:\n                _context5.next = 15;\n                break;\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](2);\n\n                if (!(_context5.t0.code === 4902)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                _context5.next = 12;\n                return this.metamaskProvider.request({\n                  method: \"wallet_addEthereumChain\",\n                  params: [{\n                    chainId: chainConfig.chainId,\n                    chainName: chainConfig.displayName,\n                    rpcUrls: [chainConfig.rpcTarget]\n                  }]\n                });\n\n              case 12:\n                _context5.next = 15;\n                break;\n\n              case 14:\n                throw _context5.t0;\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 7]]);\n      }));\n\n      function switchChain(_x2) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }]);\n\n  return MetamaskAdapter;\n}(BaseAdapter);\n\nexport { MetamaskAdapter };","map":{"version":3,"sources":["../src/metamaskAdapter.ts"],"names":["ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","constructor","adapterOptions","provider","init","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","ADAPTER_EVENTS","options","setAdapterSettings","connect","getChainConfig","adapter","WalletLoginError","method","chainId","reconnected","rehydrated","disconnect","cleanup","getUserInfo","switchChain","params","chainConfig","switchError","chainName","rpcUrls"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}